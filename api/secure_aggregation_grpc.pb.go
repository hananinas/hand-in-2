// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.4
// source: secure_aggregation.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretSharingServiceClient is the client API for SecretSharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretSharingServiceClient interface {
	// SendShare is used to send a share to another server
	SendShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Ack, error)
	SendShareOut(ctx context.Context, in *ShareOut, opts ...grpc.CallOption) (*Ack, error)
	GetAddedShares(ctx context.Context, in *GetAddedSharesRequest, opts ...grpc.CallOption) (*GetAddedSharesResponse, error)
	GetAddedOut(ctx context.Context, in *GetAddedOutRequest, opts ...grpc.CallOption) (*GetAddedOutResponse, error)
}

type secretSharingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretSharingServiceClient(cc grpc.ClientConnInterface) SecretSharingServiceClient {
	return &secretSharingServiceClient{cc}
}

func (c *secretSharingServiceClient) SendShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/SecretSharingService/SendShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretSharingServiceClient) SendShareOut(ctx context.Context, in *ShareOut, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/SecretSharingService/SendShareOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretSharingServiceClient) GetAddedShares(ctx context.Context, in *GetAddedSharesRequest, opts ...grpc.CallOption) (*GetAddedSharesResponse, error) {
	out := new(GetAddedSharesResponse)
	err := c.cc.Invoke(ctx, "/SecretSharingService/GetAddedShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretSharingServiceClient) GetAddedOut(ctx context.Context, in *GetAddedOutRequest, opts ...grpc.CallOption) (*GetAddedOutResponse, error) {
	out := new(GetAddedOutResponse)
	err := c.cc.Invoke(ctx, "/SecretSharingService/GetAddedOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretSharingServiceServer is the server API for SecretSharingService service.
// All implementations must embed UnimplementedSecretSharingServiceServer
// for forward compatibility
type SecretSharingServiceServer interface {
	// SendShare is used to send a share to another server
	SendShare(context.Context, *Share) (*Ack, error)
	SendShareOut(context.Context, *ShareOut) (*Ack, error)
	GetAddedShares(context.Context, *GetAddedSharesRequest) (*GetAddedSharesResponse, error)
	GetAddedOut(context.Context, *GetAddedOutRequest) (*GetAddedOutResponse, error)
	mustEmbedUnimplementedSecretSharingServiceServer()
}

// UnimplementedSecretSharingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecretSharingServiceServer struct {
}

func (UnimplementedSecretSharingServiceServer) SendShare(context.Context, *Share) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShare not implemented")
}
func (UnimplementedSecretSharingServiceServer) SendShareOut(context.Context, *ShareOut) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShareOut not implemented")
}
func (UnimplementedSecretSharingServiceServer) GetAddedShares(context.Context, *GetAddedSharesRequest) (*GetAddedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddedShares not implemented")
}
func (UnimplementedSecretSharingServiceServer) GetAddedOut(context.Context, *GetAddedOutRequest) (*GetAddedOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddedOut not implemented")
}
func (UnimplementedSecretSharingServiceServer) mustEmbedUnimplementedSecretSharingServiceServer() {}

// UnsafeSecretSharingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretSharingServiceServer will
// result in compilation errors.
type UnsafeSecretSharingServiceServer interface {
	mustEmbedUnimplementedSecretSharingServiceServer()
}

func RegisterSecretSharingServiceServer(s grpc.ServiceRegistrar, srv SecretSharingServiceServer) {
	s.RegisterService(&SecretSharingService_ServiceDesc, srv)
}

func _SecretSharingService_SendShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretSharingServiceServer).SendShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecretSharingService/SendShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretSharingServiceServer).SendShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretSharingService_SendShareOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretSharingServiceServer).SendShareOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecretSharingService/SendShareOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretSharingServiceServer).SendShareOut(ctx, req.(*ShareOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretSharingService_GetAddedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretSharingServiceServer).GetAddedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecretSharingService/GetAddedShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretSharingServiceServer).GetAddedShares(ctx, req.(*GetAddedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretSharingService_GetAddedOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddedOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretSharingServiceServer).GetAddedOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecretSharingService/GetAddedOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretSharingServiceServer).GetAddedOut(ctx, req.(*GetAddedOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretSharingService_ServiceDesc is the grpc.ServiceDesc for SecretSharingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretSharingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SecretSharingService",
	HandlerType: (*SecretSharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendShare",
			Handler:    _SecretSharingService_SendShare_Handler,
		},
		{
			MethodName: "SendShareOut",
			Handler:    _SecretSharingService_SendShareOut_Handler,
		},
		{
			MethodName: "GetAddedShares",
			Handler:    _SecretSharingService_GetAddedShares_Handler,
		},
		{
			MethodName: "GetAddedOut",
			Handler:    _SecretSharingService_GetAddedOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secure_aggregation.proto",
}
